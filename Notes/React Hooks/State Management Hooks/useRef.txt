========================
  💡 What is useRef?
========================

useRef is a React Hook 🪝 that provides a way to persist mutable values across renders without causing re-renders.
It is often used to directly access DOM elements or to store values that don’t need to trigger a component update.

========================
  🚀 Why use useRef?
========================

1️⃣ Access DOM Elements:
    You can attach useRef to an element via the ref attribute to directly manipulate it.

2️⃣ Retains Values Without Re-renders:
    Unlike useState, updating a ref value does not cause the component to re-render.

3️⃣ Store Previous State or Props:
    Helpful for tracking the last value of a variable across renders.

4️⃣ Not Limited to DOM References:
    Can store any kind of value, like a counter, timeout ID, or object reference.

5️⃣ Refs as Props:
    Refs can be passed to child components for controlled access to DOM nodes or other values.

========================
  🔥 Key Features of useRef
========================

💠 Doesn’t Re-render:
    Updates to .current don’t affect the render cycle.

💠 Mutable Container:
    useRef returns an object { current: value }.
    You can change .current freely.

💠 Initial Value:
    You can provide an initial value like useRef(0) or useRef(null).

💠 Direct DOM Access:
    Example: focus an input field automatically.

========================
  📝 Example Usage
========================

import React, { useRef, useEffect } from "react";

function InputFocus() {
  const inputRef = useRef(null);

  useEffect(() => {
    inputRef.current.focus(); // Directly focuses input on mount
  }, []);

  return (
    <div>
      <input ref={inputRef} type="text" placeholder="Type here..." />
    </div>
  );
}

========================
  🔁 Storing Values Example
========================

import React, { useState, useRef, useEffect } from "react";

function PreviousValueExample() {
  const [count, setCount] = useState(0);
  const prevCount = useRef();

  useEffect(() => {
    prevCount.current = count; // Store previous value
  }, [count]);

  return (
    <div>
      <p>Current: {count}</p>
      <p>Previous: {prevCount.current}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

========================
  🕰️ When Should You Use useRef?
========================

✅ When you need to manipulate a DOM element directly (focus, scroll, select, etc.).
✅ When you want to store mutable values that shouldn’t trigger re-renders.
✅ When you need to track previous state or prop values.
✅ When passing ref objects as props to child components.

========================
  ⚠️ Things to Remember
========================

🚫 Don’t use useRef to replace useState for reactive data (UI won’t update).
🚫 Avoid overusing useRef for logic that should ideally be in state.

========================
  ✅ Conclusion
========================

useRef is a lightweight and powerful tool in React 🔧.
It’s perfect for DOM manipulation, holding mutable values, and tracking previous states—all without unnecessary re-renders ⚡.