Using Forms in React
------------------------------------

💡 What are Forms in React?
--------------------------

Forms in React are used to collect user input 📥, such as text, emails, or passwords.
Unlike plain HTML forms, React uses state to control form fields and handle submissions more effectively ⚡.

------------------------------------

🚀 Key Concepts in Using Forms
-----------------------------

1️⃣ State Management
--------------------

Each input field is linked to the component's state 🗂️.
This makes the input a controlled component, where React fully manages its value.

Example:
const [name, setName] = useState("");

2️⃣ Handling Changes
--------------------

Use the onChange event to detect and update state whenever the input changes ✍️.

Example:
<input 
  type="text" 
  value={name} 
  onChange={(event) => setName(event.target.value)} 
/>

3️⃣ Form Submission
-------------------

Forms are submitted with the onSubmit event on the <form> element 📤.
Use event.preventDefault() to stop the default browser refresh.

Example:
const handleSubmit = (event) => {
  event.preventDefault();
  console.log("Form submitted:", name);
};

<form onSubmit={handleSubmit}>
  <button type="submit">Submit</button>
</form>

4️⃣ Validation
--------------

Validation ensures users provide correct input ✅.

Options:
- Custom Validation → Check values in state and show messages.
- Third-Party Libraries → Use tools like Formik or React Hook Form for complex validation.

Example:
if (name.trim() === "") {
  alert("Name is required!");
}

------------------------------------

🛠️ Practical Example - Login Form
--------------------------------


import React, { useState } from "react";

function LoginForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = (event) => {
    event.preventDefault();

    // Simple Validation
    if (email.trim() === "" || password.trim() === "") {
      alert("Both fields are required!");
      return;
    }

    if (!email.includes("@")) {
      alert("Please enter a valid email address!");
      return;
    }

    console.log("Login Successful ✅");
    console.log("Email:", email);
    console.log("Password:", password);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Email:</label>
        <input 
          type="email" 
          value={email} 
          onChange={(event) => setEmail(event.target.value)} 
        />
      </div>

      <div>
        <label>Password:</label>
        <input 
          type="password" 
          value={password} 
          onChange={(event) => setPassword(event.target.value)} 
        />
      </div>

      <button type="submit">Login</button>
    </form>
  );
}

export default LoginForm;

------------------------------------

📝 Summary
-----------

📦 State stores form input values.
🖊️ onChange updates state whenever the user types.
📤 onSubmit handles form submissions (use event.preventDefault()).
✅ Validation ensures correct input before submission.
🛠️ Practical example → Login form with email + password + validation.

⚡ React forms are powerful, flexible, and predictable because of controlled components and clear state management.
