📘 React Components - Detailed Explanation

--------------------
💡 10. File Extensions
--------------------

📄 .js
- Stands for JavaScript
- Contains regular JavaScript code
- Used for general logic and components

📄 .jsx
- Stands for JavaScript XML
- Combines JavaScript with HTML-like tags
- Makes it easier to design UI components

🔹 Example:

// App.jsx
function App() {
  return <h1>Hello World 🌍</h1>;
}

export default App;

--------------------
💡 11. Class vs Function Components
--------------------

🏛️ Class Components
- Stateful: Can manage state.
- Lifecycle: Access to lifecycle methods.
- Verbose: More boilerplate code.
- Not preferred anymore.

⚡ Functional Components
- Initially stateless.
- Can use Hooks (useState, useEffect) for state and effects.
- Simpler and more concise.
- More popular today.

🔹 Example:

// Functional Component
function Welcome() {
  return <p>Welcome, User 🙌</p>;
}

// Class Component
import React, { Component } from "react";
class WelcomeClass extends Component {
  render() {
    return <p>Welcome from Class 🎓</p>;
  }
}

--------------------
💡 12. What is JSX?
--------------------

1️⃣ Definition: JSX determines how the UI will look wherever the component is used.  
2️⃣ Not HTML: Though it resembles HTML, you're actually writing JavaScript XML.  
3️⃣ Conversion: JSX is converted into regular JavaScript.  
4️⃣ Tool: babeljs.io/repl shows how JSX is transformed.  

🔹 Example:

const user = "Umar";
const element = <h2>Hello, {user}! 👋</h2>;

--------------------
💡 13. Exporting Components
--------------------

1️⃣ Enables reuse of a component in other files.  
2️⃣ Default Export: One main export per file.  
3️⃣ Named Export: Export multiple items from a module.  
4️⃣ Importing: Use import to bring it into another file.  

🔹 Example:

// Default Export
function Button() {
  return <button>Click Me 🖱️</button>;
}
export default Button;

// Named Export
export function Header() {
  return <h1>App Header 📌</h1>;
}

// Importing
import Button, { Header } from "./components/Button";

--------------------
💡 14. Other Important Points
--------------------

1️⃣ Naming: Components must start with a capital letter.  
2️⃣ HTML: Unlike vanilla JS, React allows embedding HTML-like syntax via JSX.  
3️⃣ CSS: You can import CSS directly into component files.  

🔹 Example:

import "./App.css";  

function App() {
  return <h1 className="title">Styled React Component 🎨</h1>;
}

--------------------
💡 15. Dynamic Components
--------------------

1️⃣ Dynamic Content: JSX allows creating interactive UI.  
2️⃣ JavaScript Expressions: Use {} inside JSX to embed variables, functions, and calculations.  

🔹 Example:

const name = "Muhammad Umar";
const year = new Date().getFullYear();

function Footer() {
  return <p>© {year} - Created by {name} ✨</p>;
}

--------------------
💡 16. Reusable Components
--------------------

1️⃣ Modularity: Components can be reused anywhere.  
2️⃣ Consistency: Ensures uniform UI.  
3️⃣ Efficiency: Saves time and avoids duplication.  
4️⃣ Maintainability: Updates reflect everywhere.  

🔹 Example:

function Button({ text }) {
  return <button>{text}</button>;
}

// Usage
function App() {
  return (
    <>
      <Button text="Login 🔑" />
      <Button text="Register 📝" />
    </>
  );
}

--------------------
✅ Conclusion
--------------------

React components are the building blocks of modern web apps.  
By using JSX, dynamic rendering, and reusable structures, developers can create efficient, consistent, and scalable UIs 🚀.
