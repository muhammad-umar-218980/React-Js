CSS MODULES
-----

1. What are CSS Modules?
• CSS Modules are a way to write CSS such that styles are scoped locally to the component.
• Unlike traditional CSS where class names are global, CSS Modules generate unique class names automatically.
• This avoids class name collisions and makes styles modular and maintainable.

-----

2. Why use CSS Modules?
• Localized class names → Prevents global conflicts between styles.
• Scoped styles → Each component gets its own styling without affecting others.
• Maintainability → Easier to manage CSS in large applications.
• Flexibility → Can be used with global CSS when needed.

-----

3. How to use CSS Modules?
• Create a CSS file with `.module.css` extension.
• Import it inside a React component.
• Use the imported styles object to apply class names.

-----

4. Example: Creating a CSS Module file
File: `Button.module.css`
--------------------------------
.button {
  background-color: blue;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.primary {
  background-color: green;
}

.danger {
  background-color: red;
}
--------------------------------

-----

5. Example: Using CSS Module in React
File: `Button.jsx`
--------------------------------
import React from "react";
import styles from "./Button.module.css";  // Import the module file

function Button({ type, label }) {
  return (
    <button
      className={
        type === "primary" 
          ? styles.primary 
          : type === "danger" 
          ? styles.danger 
          : styles.button
      }
    >
      {label}
    </button>
  );
}

export default Button;
--------------------------------

-----

6. Example: Using Multiple Classes
File: `Card.jsx`
--------------------------------
import React from "react";
import styles from "./Card.module.css";

function Card() {
  return (
    <div className={`${styles.card} ${styles.shadow}`}>
      <h2 className={styles.title}>Card Title</h2>
      <p className={styles.content}>This is a card with CSS Modules</p>
    </div>
  );
}

export default Card;
--------------------------------

File: `Card.module.css`
--------------------------------
.card {
  background: white;
  padding: 20px;
  border-radius: 10px;
}

.shadow {
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.title {
  font-size: 20px;
  font-weight: bold;
}

.content {
  font-size: 16px;
}
--------------------------------

-----

7. Combining CSS Modules with Global CSS
• CSS Modules are great for component-specific styles.
• But sometimes you may still want global styles (like `reset.css` or `index.css`).
• Best practice:
  - Use global CSS for base styles (body, html, default margins, typography).
  - Use CSS Modules for component-specific styles.

Example:
--------------------------------
import "./global.css";    // global styles
import styles from "./App.module.css";  // CSS module

function App() {
  return (
    <div className={styles.container}>
      <h1 className="global-heading">Welcome</h1> 
      <p className={styles.text}>This is styled with CSS Modules</p>
    </div>
  );
}

export default App;
--------------------------------

-----

8. Benefits of CSS Modules
• Scoped styles → No accidental overrides.
• Unique class names → Auto-generated like `Button_button__1abc`.
• Modular approach → Easier maintenance in big projects.
• Can still use global CSS when required.

-----

9. Key Points to Remember
• Always use `.module.css` extension.
• Import styles as an object (e.g., `styles`).
• Access classes as `styles.className`.
• Use template literals (``) or string concatenation to combine multiple classes.
• Best for medium to large React projects.
-----




CSS Modules vs Global CSS
------------------------------------------------------------

1. Introduction
------------------------------------------------------------
In React (or modern frontend development), styling can be managed in two common ways:
- Using  Global CSS  (traditional way)
- Using  CSS Modules  (modern, component-scoped approach)

Both approaches serve different purposes, and understanding the differences helps in writing maintainable and scalable code.

------------------------------------------------------------
2. Global CSS
------------------------------------------------------------
• Traditional approach where CSS is written in a `.css` file.  
• Styles defined are  global , meaning they can affect all components unless carefully scoped.  
• Requires developers to use unique class names manually to avoid conflicts.  
• Great for global themes, resets, and utility classes.

Example (global.css):
------------------------------------------------------------
/* global.css */
.container {
  background-color: lightblue;
  padding: 20px;
  border-radius: 8px;
}

.text {
  font-size: 18px;
  color: darkblue;
}

Example Usage in Component:
------------------------------------------------------------
import React from "react";
import "./global.css";

function GlobalComponent() {
  return (
    <div className="container">
      <p className="text">This is styled with Global CSS.</p>
    </div>
  );
}

export default GlobalComponent;

------------------------------------------------------------
3. CSS Modules
------------------------------------------------------------
• Introduced to avoid  naming conflicts  in large projects.  
• File naming convention: `ComponentName.module.css`.  
• Classes are  scoped locally  to the component by default.  
• Automatically generates  unique class names  behind the scenes.  
• Helps create  modular, maintainable, and reusable  components.  
• Can still be combined with global CSS when needed.

Example (Button.module.css):
------------------------------------------------------------
.button {
  background-color: green;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.text {
  font-weight: bold;
}

Example Usage in Component:
------------------------------------------------------------
import React from "react";
import styles from "./Button.module.css";

function Button() {
  return (
    <button className={styles.button}>
      <span className={styles.text}>Click Me</span>
    </button>
  );
}

export default Button;

------------------------------------------------------------
4. CSS Modules vs Global CSS (Comparison)
------------------------------------------------------------
| Feature                 | Global CSS                      | CSS Modules                                |
|-------------------------|---------------------------------|--------------------------------------------|
| Scope                   | Global (applies everywhere)     | Local to the component                     |
| Class Name Conflicts    | Possible, must manage manually  | Avoided automatically                      |
| Reusability             | Less modular, more generic      | Component-specific and reusable            |
| File Naming             | .css                            | .module.css                                |
| Best Use Cases          | Resets, themes, utilities       | Component styles, modular design           |

------------------------------------------------------------
5. When to Use What?
------------------------------------------------------------
• Use  Global CSS :
  - For global styles (resets, typography, utility classes).
  - When styling libraries/frameworks (Bootstrap, Tailwind, etc.).
  
• Use  CSS Modules :
  - For component-specific styles.
  - When building scalable and modular React applications.
  - To avoid conflicts in large teams/projects.

------------------------------------------------------------
6. Key Takeaways
------------------------------------------------------------
• CSS Modules localize styles and make them safer for reuse.  
• Global CSS is still important for global resets and shared utilities.  
• A good React project often uses  both CSS Modules and Global CSS  together for maximum flexibility.
---------------------------------
• CSS Modules localize styles and make them safer for reuse.  
• Global CSS is still important for global resets and shared utilities.  
• A good React project often uses  both CSS Modules and Global CSS  together for maximum flexibility.
